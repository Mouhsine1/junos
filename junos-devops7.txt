							< Python >
- is interpreted language there is no compilation
- python is a high level programming language .
- many modules and libraries
- automatic memory mgmt
- cross platform 
- c and java are low level programming language .

============================================================================================================
							Steps
==============================================================================================================

- no compilation phase is needed 

- progam files is translated into byte code before execution 

- byte code is interpreted in python virtual machine 
  code intermédiaire entre les instructions machines et le code source, il n'est pas directement exécutable.

|start|  -----> |source code .py| -------> | byte code .pyc| -------> | byte code exec in run time| --------> |stop|

==============================================================================================================
#! /bin/bash 

interfaces=["ge-0/0/1","ge-0/0/2"]

for interface in interfaces: 
    print(interface)
==============================================================================================================
#!/bin/bash 

interfaces=["ge-0/0/1";"xe-0/0/1"]

for interface in interface: 
    if interface.startswitch('ge-'):              ==========> strtswitch t check if the string start 
       print("this %s is 1g !" % interface)                     
   elif interface.startswitch('xe-'):      <====== to begin a block
        print("this %s 10g interface !" % interface)
   else: 
.       print("couldn't recognize the %s !" % interface)                =======> indentation to show the structure of code

print("finished testing!")
=============================================================================================================

def f(x):                          =======> we've defining a function .
    return x**2 ;         
====================================================================================================================
						instructions
=====================================================================================================================
a = 2   - to assign 
a == b  - to  test equality 
a !=b   - to test inquality 
a + b   - add numbers
"py" + "thon" - to concatenate 
"python"*3  - 'pythonpythonpython'
5 > 3 and "w" in "word"
======================================================================================================================
- python2 ====> print "hello"   ---> work 
- python3 ====> print "hello" ---> doesn't work
- python2 ====> print("hello","world") ===> ("hello","world")    <==== like tuple
- python3 ====> print("hello", "world")===> hello world
- python2 ====> 12/10 ====> 1       return just the integer part
- python3 ====> 12/10 ====> 1.2     return float
======================================================================================================================
>myvar = 1
>type(myvar) ====> to check the type of variable 

x = [0,1,3]
y = x      ===> now if x change the y will change 
x[0] = 5
print(x) ====> [5,1,3]
print(y) ====> [5,1,3]
====================================================================================================================
- string and number are not mutable ======> they are imutable 
s = "mouhsine"
id(s)         ====> gives the identity or the location in the memory and make us know if the var has changed !
s[O] = "b"    =====> will give an error because strings are imutable 
s.append("d") =====> again will give an error because string are imutable 
---> lists are mutable we can add , delete , append 
====================================================================================================================
					variable local & gloabal 

- indentation make us know that the block belongs to some function or some shit

#!/bin/bash 

def test_gloabal():
    private_var = 6 
    print("the value of global_string : " % global_string)                     <===== allowed 

global_string = "router1" 
print("we cant use this %s here !" % private_var) ====> can't use it        ======> not allowed


---> it will worked if we add global to private string on the function : 

#!/bin/bash 

def test_global():
    global private_var 
    private_var = 6 
    print("the value of global string : " % global_string )

global_string = "router1"
print("now we can use this var which is % private_var here " % private_var)

===========================================================================================================================							Classes & Object & Methods 
===========================================================================================================================
- classe = c'est une template 
> object-name = class-name([some-parametrs])
>object-name.method([some-parameter])
ex : l = list()	       ====> equivalent to l = []
     l.append(1)       ====> append is method defined in the list class
     l.append(2)
==========================================================================================================================
							List

>>l = [1,2,3]
>>l[2]       ====> 3 
>>l[0:2]     ====> [1,2]      ===> l[i:j] gives the elements from i to j-1  <==== this a slice 
>>len(z)     ====> 3
>>reverse(z) ====>  [3,2,1]
----> pop , insert , sort 

==========================================================================================================================
							tuple 
- are like list but they are imutable and they use parentheses ,  lists use square brackets 
>>> t = ( 1 , 3 , 5 )    <==== parentheses
>>> print(t[0])  ======> 1

==========================================================================================================================
							Dictionary 

- order is not preserved.
- d = {1:"a" , 2:"b" , 3:"c"}
>>> print(d)
{1:"a" , 2:"b" , 3:"c"}
>>>print(d[1])
a
>>> del d[1]
>>> print(d)
{2:"b" , 3:"c"}
>>> 1 in d   =========> to ensure if the key exist on the dictionnary
-----> to create a new entry just : d[4]="e"


for k in d: 
    print(k , d[key])
1 a 
2 b
3 c
===========================================================================================================
						Set
===========================================================================================================

s = {"a","b","c"} 		=====> keys without values

s.add("d")
s.intersection({'b','e','d'})
s.difference({'b','e','d'})
s.update({'x','y','z'})

=======================================================================================================================
							Python Libraries
=======================================================================================================================
- module = ficher code python 
- package = repertoire de module 
- the work is to import modules and packages like package of netconf
- python package index
- pip command line to install modules and packages 
     -packages like : requests(for REST) , paramiko 
- you need to import what you want to use !


ex: 

#!/bin/bash 

import re 

interface = fa 
if re.match('f' , interface):     <==== to reference function match in the re module 
   print("it is good ! ") 
   
========================================================================================================================

if __name== "__main__" ====> check that this is runnig as a standalone python  script and not an imported module .

from lxml import etree ===> from library lxml ipmort module etree
                       ===> now we can use thee etree.some_function
parse = analyser